/*******************************************************************************
 * Copyright (c) 2016 TypeFox GmbH (http://www.typefox.io) and others.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
grammar org.eclipse.elk.graph.text.ElkGraph with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/elk/ElkGraph"

RootNode returns ElkNode:
    {ElkNode} ('graph' identifier=ID)?
    ShapeLayout?
    properties+=Property*
    (labels+=ElkLabel | ports+=ElkPort | children+=ElkNode | containedEdges+=ElkEdge)*;

ElkNode returns ElkNode:
    'node' identifier=ID ('{'
        ShapeLayout?
        properties+=Property*
        (labels+=ElkLabel | ports+=ElkPort | children+=ElkNode | containedEdges+=ElkEdge)*
    '}')?;

ElkLabel returns ElkLabel:
    'label' (identifier=ID ':')? text=STRING ('{'
        ShapeLayout?
        properties+=Property*
        labels+=ElkLabel*
    '}')?;

ElkPort returns ElkPort:
    'port' identifier=ID ('{'
        ShapeLayout?
        properties+=Property*
        (labels+=ElkLabel | subPorts+=ElkPort)*
    '}')?;

fragment ShapeLayout returns ElkShape:
    'layout' '['(
        ('position' ':' x=Number ',' y=Number)?
        & ('size' ':' width=Number ',' height=Number)?
    )']';

/* SuppressWarnings[BidirectionalReference] */
ElkEdge returns ElkEdge:
    'edge' (identifier=ID ':')?
            sources+=[ElkConnectableShape|QualifiedId] (',' sources+=[ElkConnectableShape|QualifiedId])* '->'
            targets+=[ElkConnectableShape|QualifiedId] (',' targets+=[ElkConnectableShape|QualifiedId])* ('{'
        EdgeLayout?
        properties+=Property*
        labels+=ElkLabel*
    '}')?;

fragment EdgeLayout returns ElkEdge:
    'layout' '['(
        sections+=ElkSingleEdgeSection | sections+=ElkEdgeSection+
    )']';

ElkSingleEdgeSection returns ElkEdgeSection:
    {ElkEdgeSection} (
        (('incoming' ':' incomingShape=[ElkConnectableShape|QualifiedId])?
        & ('outgoing' ':' outgoingShape=[ElkConnectableShape|QualifiedId])?
        & ('start' ':' startX=Number ',' startY=Number)?
        & ('end' ':' endX=Number ',' endY=Number)?)
        ('bends' ':' bendPoints+=ElkBendPoint ('|' bendPoints+=ElkBendPoint)*)?
        properties+=Property*
    );

/* SuppressWarnings[BidirectionalReference] */
ElkEdgeSection returns ElkEdgeSection:
    'section' identifier=ID ('->' outgoingSections+=[ElkEdgeSection|ID] (',' outgoingSections+=[ElkEdgeSection|ID])*)? '['(
        (('incoming' ':' incomingShape=[ElkConnectableShape|QualifiedId])?
        & ('outgoing' ':' outgoingShape=[ElkConnectableShape|QualifiedId])?
        & ('start' ':' startX=Number ',' startY=Number)?
        & ('end' ':' endX=Number ',' endY=Number)?)
        ('bends' ':' bendPoints+=ElkBendPoint ('|' bendPoints+=ElkBendPoint)*)?
        properties+=Property*
    )']';

ElkBendPoint returns ElkBendPoint:
    x=Number ',' y=Number;

QualifiedId:
    ID ('.' ID)*;

Number returns ecore::EDouble:
    SIGNED_INT | FLOAT;

Property returns ElkPropertyToValueMapEntry:
    key=PropertyKey ':' (value=StringValue | value=QualifiedIdValue | value=NumberValue | value=BooleanValue | 'null');

PropertyKey returns IProperty hidden():
    ID ('.' ID)*;

StringValue returns ecore::EJavaObject:
    STRING;

QualifiedIdValue returns ecore::EJavaObject:
    QualifiedId;

NumberValue returns ecore::EJavaObject:
    SIGNED_INT | FLOAT;

BooleanValue returns ecore::EJavaObject:
    'true' | 'false';

terminal SIGNED_INT returns ecore::EInt:
    ('+'|'-')? INT;

terminal FLOAT returns ecore::EDouble: 
    ('+'|'-')? (INT '.' INT | INT ('.' INT)? ('e'|'E') ('+'|'-')? INT);
